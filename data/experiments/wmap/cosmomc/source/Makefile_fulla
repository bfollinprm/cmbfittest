#You may need to edit the library paths for MKL for Intel
#Beware of using optimizations that lose accuracy - may give errors when running

##Uncomment the next line to include dr7 LRG
EXTDATA = 
#EXTDATA = LRG

PICO = 

#set WMAP empty not to compile with WMAP
#WMAP = ../../wmap_likelihood_v5
#WMAP = ../wmap7
WMAP = ../wmap9

#Only needed for WMAP
#cfitsio = /usr/local/opt/cfitsio
cfitsio = /lustre/bbenson/cfitsio_3240_intel

#GSL only needed for DR7 LRG
#GSLPATH = $(GSLDIR)
GSLPATH = /lustre/bbenson/lib_source/gsl-1.14

#MKL PATH - only needed for sz clusters
EXTDATASZ = SZ
MKLPATH = /opt/intel/Compiler/11.0/074/mkl/

IFLAG = -I
INCLUDE= $(IFLAG)../camb

#PICODIR = $(PRJDIR)/Projects/cmb.neutrinos/cosmomc.h12.pico/pico3/libpico
#INCLUDEPICO = -I$(PICODIR)
ifeq ($(PICO),pico3)
LINKPICO = $(shell python -c "import pypico; print pypico.get_link()")
endif

#INCLUDE = $(INCLUDEPICO)

#Intel MPI (assuming mpif90 set to point to ifort)
#these settings for ifort 11.1 and higher; may need to add explicit link directory otherwise
#F90C     = mpif90 -f90=ifort
F90C     = /usr/local/mpich2-intel/bin/mpif90
# -f90=ifort
#FFLAGS = -O2 -ip -W0 -WB -openmp -fpp -DMPI -vec_report0 -mkl=parallel
#FFLAGS  = -w -O3 -openmp -f95 -fpp -DMPI #worked
FFLAGS  = -w -O3 -openmp -f95 -fpp -DMPI -lmkl_solver_lp64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5#-mkl:parallel# -vec_report0 -ip -W0 -WB
#F90C    =  /opt/intel/Compiler/11.0/074/bin/intel64/ifort
#FFLAGS  = -w -O3 -openmp -f95 -fpp

#LAPACKL = -lmkl_lapack 
LAPACKL = -L/opt/intel/Compiler/11.0/074/mkl/lib -L/opt/intel/Compiler/11.0/074/mkl/lib/em64t -lmkl_core -lmkl_lapack -lmkl_intel_lp64 -lmkl_intel_thread -liomp5 -lpthread1

#COSMOS: use "module load cosmolib latest" 
#use "runCosmomc" (globally installed) to run, defining required memory usage
ifeq ($(COSMOHOST),cosmos)
F90C = ifort
FFLAGS = -openmp -O3 -w -fpp2 -DMPI
LAPACKL = -mkl=sequential -lmkl_lapack -lmpi
cfitsio = $(CFITSIO)
WMAP = $(COSMOLIB)/WMAP9
GSLPATH = $(GSL_ROOT)
endif

PROPOSE = propose.o
ifeq ($(PICO),pico3)
CLSFILE = CMB_Cls_pico.o
PICFILE = pico_camb.o
else
CLSFILE = CMB_Cls_simple.o
PICFILE = 
endif

#Can use params_H if you prefer more generic parameters
PARAMETERIZATION = params_CMB.o

F90FLAGS = -DMATRIX_SINGLE $(FFLAGS) $(IFLAG)../camb $(INCLUDE)
ifeq ($(PICO),pico3)
F90FLAGS += -DPICO
endif
#LINKFLAGS = -L../camb -lcamb $(LAPACKL) -lmpichf90 -lmpich $(LINKPICO)
LINKFLAGS = -L../camb -lcamb $(LAPACKL) -lmpichf90 -lmpichf90 -lmpich

DISTFILES = ParamNames.o Matrix_utils.o settings.o IO.o GetDist.o

OBJFILES=  ParamNames.o Matrix_utils.o settings.o IO.o cmbtypes.o Planck_like.o  \
	cmbdata.o WeakLen.o bbn.o lrggettheory.o mpk.o bao.o supernovae.o HST.o SDSSLy-a-v3.o \
	abundance.o $(PICFILE) $(CLSFILE) paramdef.o $(PROPOSE) expansion.o $(PARAMETERIZATION) calclike.o \
	conjgrad_wrapper.o EstCovmat.o postprocess.o MCMC.o driver.o SNLS.o

OBJFILES3=  ParamNames.o Matrix_utils.o settings.o IO.o cmbtypes.o Planck_like.o  \
        cmbdata.o WeakLen.o bbn.o lrggettheory.o mpk.o bao.o supernovae.o HST.o SDSSLy-a-v3.o \
        abundance.o $(PICFILE) $(CLSFILE) paramdef.o $(PROPOSE) expansion.o $(PARAMETERIZATION) calclike.o \
        conjgrad_wrapper.o EstCovmat.o postprocess.o MCMC.o driver.o SNLS.o

#OBJFILES2=szcluster.o szclus_utils.o tinkermass.o

ifeq ($(EXTDATASZ),SZ)
MKLINC = -I$(MLPATH)/include
LINKFLAGS += -L$(MKLPATH)/lib/em64t #-lmkl_vsl
endif

ifeq ($(EXTDATA),LRG)
F90FLAGS += -DDR71RG
OBJFILES += bsplinepk.o
GSLINC = -I$(GSLPATH)/include
LINKFLAGS += -L$(GSLPATH)/lib -lgsl -lgslcblas
endif

ifneq ($(WMAP),)
F90FLAGS += $(IFLAG)$(WMAP)
LINKFLAGS +=  -L$(cfitsio) -L$(WMAP) -lcfitsio

OBJFILES3 += $(WMAP)/read_archive_map.o \
	$(WMAP)/read_fits.o \
	$(WMAP)/healpix_types.o \
	$(WMAP)/WMAP_9yr_options.o \
	$(WMAP)/WMAP_9yr_util.o \
	$(WMAP)/WMAP_9yr_tt_pixlike.o \
	$(WMAP)/WMAP_9yr_teeebb_pixlike.o \
	$(WMAP)/WMAP_9yr_likelihood.o \
	$(WMAP)/WMAP_9yr_gibbs.o \
	$(WMAP)/WMAP_9yr_tt_beam_ptsrc_chisq.o \
	$(WMAP)/br_mod_dist.o 
else

F90FLAGS += -DNOWMAP
endif

OBJFILES = $(OBJFILES3) driver.o

ifeq ($(PICO),pico3)
default: pico
else
default: cosmomc
endif

all : cosmomc getdist

utils.o: ../camb/libcamb.a
settings.o: utils.o
cmbtypes.o: settings.o
Planck_like.o: cmbtypes.o
cmbdata.o: Planck_like.o $(WMAPOBJS)
WeakLen.o: cmbtypes.o
bbn.o: settings.o
mpk.o: cmbtypes.o lrggettheory.o
bao.o: cmbtypes.o mpk.o
HST.o: cmbtypes.o
supernovae.o: cmbtypes.o
SNLS.o: cmbtypes.o
SDSSLy-a-v3.o: cmbtypes.o
abundance.o: cmbtypes.o
$(CLSFILE): cmbtypes.o mpk.o HST.o bao.o IO.o
paramdef.o: $(CLSFILE)
$(PROPOSE): paramdef.o
expansion.o: cmbtypes.o
$(PARAMETERIZATION): paramdef.o expansion.o
calclike.o: $(PARAMETERIZATION) SNLS.o expansion.o
conjgrad_wrapper.o: calclike.o
EstCovmat.o: conjgrad_wrapper.o
postprocess.o: calclike.o
MCMC.o: calclike.o
driver.o: MCMC.o
#szcluster.o: tinkermass.o
#tinkermass.o: szclus_utils.o

export FFLAGS
export F90C

.f.o:
	f77 $(F90FLAGS) -c $<

%.o: %.c
	$(CC) $(GSLINC) -c $*.c

%.o: %.f90
	$(F90C) $(F90FLAGS) -c $*.f90

%.o: %.F90
	$(F90C) $(F90FLAGS) -c $*.F90

#cosmomc: camb $(OBJFILES) $(OBJFILES2)
#	$(F90C) -o ../cosmomc $(OBJFILES) $(OBJFILES2) $(LINKFLAGS) $(F90FLAGS)
cosmomc: camb $(OBJFILES) 
	$(F90C) -o ../cosmomc $(OBJFILES) $(LINKFLAGS) $(F90FLAGS)

cosmomc_print: camb $(OBJFILES)
	rm cmbdata.o
	$(F90C) $(F90FLAGS) -c cmbdata.F90 -D_SAVE_BANDPOWERS_
	$(F90C) -o ../cosmomc_print $(OBJFILES) $(LINKFLAGS) $(F90FLAGS)
	rm cmbdata.o

pico: camb $(OBJFILES)
	$(F90C) -o ../pico $(OBJFILES) $(LINKFLAGS) $(F90FLAGS)


clean: cleancosmomc
	rm -f ../camb/*.o ../camb/*.obj ../camb/*.mod

cleancosmomc:
	rm -f *.o *.mod *.d *.pc *.obj ../core


getdist: camb $(DISTFILES)
	$(F90C) -o ../getdist $(DISTFILES) $(LINKFLAGS) $(F90FLAGS)

camb:
	cd ../camb && $(MAKE) --file=Makefile_main libcamb.a
